import type { WebAuth, Auth0Result } from "auth0-js";
import { defaultAuthObject } from "components/AppProvider";
import { get } from "utils/DataService";
import type { AuthState } from "components/AppProvider";

export default class AuthService {
  static calculateExpirationTime(secondsUntilExpiration: number) {
    const currentTime = new Date();
    const expirationTime = new Date(
      currentTime.getTime() + secondsUntilExpiration * 1000
    );

    return expirationTime;
  }

  static persistUser(hash: string, webAuth: WebAuth, setAuthState: any) {
    webAuth.parseHash({ hash }, (err, authResult) => {
      if (err) {
        // TODO: Handle errors
      }

      if (authResult?.accessToken) {
        const { accessToken, expiresIn, idTokenPayload } = authResult;
        const authObject = {
          isAuthenticated: true,
          user: {
            email: idTokenPayload.email,
            id: idTokenPayload.sub,
          },
          accessTokenObject: {
            token: accessToken,
            expiresAt: expiresIn
              ? this.calculateExpirationTime(expiresIn)
              : null,
          },
        };

        setAuthState(authObject);
      }
    });
  }

  static signUpUser = (webAuth: WebAuth, email: string) => {
    return new Promise((resolve, reject) => {
      AuthService.userExists(email).then((exists) => {
        if (!exists) {
          // Todo: save the user's email/name/org to our database along with the ID generated by
          // auth0 on successful sign up
          resolve(AuthService.passwordlessStart(webAuth, email));
        } else {
          reject(new Error('userExists'));
        }
      });
    });
  };

  // This method initaties the log in process by sending a code
  // to the user's inbox.
  static passwordlessStart = (webAuth: WebAuth, email: string) => {
    return new Promise((resolve, reject) => {
      webAuth.passwordlessStart(
        {
          connection: "email",
          send: "code",
          email,
        },
        (err) => {
          if (err) {
            reject(err);
            return;
          }

          resolve(true);
        }
      );
    });
  };

  static passwordlessVerify = (
    webAuth: WebAuth,
    email: string,
    verificationCode: string
  ) => {
    webAuth.passwordlessLogin(
      {
        connection: "email",
        email,
        verificationCode,
      },
      (err) => {
        if (err) {
          // TODO: Handle errors
        }
      }
    );
  };

  static logout = (
    webAuth: WebAuth,
    clientId: string,
    setAuthState: (state: AuthState) => void
  ) => {
    // Resets authState which in turn triggers an effect that clears sessionStorage
    setAuthState(defaultAuthObject);

    webAuth.logout({
      returnTo: "http://localhost:8080",
      clientID: clientId,
    });
  };

  static tokenExpired = (tokenExpiration: Date) => {
    return tokenExpiration && new Date(tokenExpiration) < new Date();
  };

  static refreshAuthToken = (webAuth: WebAuth) => {
    return new Promise((resolve, reject) => {
      webAuth.checkSession({}, (err, authResult: Auth0Result) => {
        if (err) {
          reject(err);
        } else {
          resolve(authResult);
        }
      });
    });
  };

  static userExists = (email: string) => {
    return new Promise((resolve, reject) => {
      const response = get(`/api/auth/user_exists?email=${email}`);
      response.then((result) => {
        resolve(result.user_exists);
      }, (error) => {
        reject(error);
      })
    });
  }
}
